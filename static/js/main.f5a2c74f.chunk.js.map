{"version":3,"sources":["serviceWorker.js","api.js","appReducer.ts","redux-store.ts","ItemInput.js","TodoListHeader.tsx","TodoListTask.tsx","TodoListTasks.tsx","TodoListFooter.tsx","TodoList.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","baseURL","todoListAPI","get","todolistId","concat","then","r","data","title","post","delete","taskTitle","task","taskId","todoListId","put","Object","objectSpread2","initialState","todoLists","deleteTaskAC","type","updateTaskAC","setTodoListTasksAC","tasks","addTodoListsAC","todolist","setTodoListsAC","todolists","deleteTodoListAC","addTaskAC","newTask","reducer","state","arguments","length","undefined","action","map","item","_id","filter","toConsumableArray","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","getState","ItemInput","inputValue","inputErrorStyle","inputOnChange","e","_this","setState","target","value","addNewItem","props","addItem","render","react_default","a","createElement","className","onChange","placeholder","onClick","React","Component","TodoListHeader","deleteTodoList","src_ItemInput","addTask","TodoListTask","editModeTask","editModePriority","newTaskName","newPriority","EditModeOn","EditModeTaskPriorityOn","newCheckedValue","status","currentTarget","checked","updateTask","EditModeOff","EditModeTaskPriorityOff","priority","setNewTaskName","setNewPriority","react","onDoubleClick","order","autoFocus","onBlur","deleteTask","TodoListTasks","_this$props$tasks","tasksElements","src_TodoListTask","TodoListFooter","showMode","changeShowMode","newShowModeValue","classForAll","filterValue","classForCompleted","classForActive","changeFilterValue","TodoList","newFilterValue","filteredTasks","src_TodoListHeader","src_TodoListTasks","src_TodoListFooter","this","getTasks","App","src_TodoList","addTodoList","setTodoLists","connect","dispatch","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","sent","stop","_x","apply","_ref5","_callee5","_context5","_x5","addTodoListTC","_ref6","_callee6","_context6","_x6","deleteTodoListTC","_ref7","_callee7","_context7","_x7","addTaskTC","_ref2","_callee2","_context2","_x2","getTasksTC","_ref3","_callee3","_context3","resultCode","_x3","updateTasksTC","_ref4","_callee4","_context4","_x4","deleteTaskTC","ReactDOM","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5a2c74f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    // withCredentials: true,\r\n    baseURL: 'https://radiant-plains-31062.herokuapp.com',\r\n    // headers: {\"API-KEY\": \"2e11e55a-6317-486e-b332-4118c5f8bf85\"},\r\n})\r\n\r\n\r\nexport const todoListAPI = {\r\n    getTodoLists: () => {\r\n        return instance.get('/todo-lists')\r\n    }, getTasks: (todolistId) => {\r\n        return instance.get(`/todo-lists/${todolistId}/tasks`).then((r)=>r.data)\r\n    }\r\n    ,\r\n    addTodoList: (title) => {\r\n        return instance.post('/todo-lists', {title: title})\r\n    },\r\n    deleteTodoList: (todolistId) => {\r\n        return instance.delete(`/todo-lists/${todolistId}`)\r\n    },\r\n    addTask: (taskTitle, todolistId) => {debugger\r\n        return instance.post(`/todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n    },\r\n    updateTask: (task, taskId, todoListId) => {\r\n\r\n        return instance.put(`/todo-lists/${todoListId}/tasks/${taskId}`, {...task})\r\n    },\r\n    deleteTask: (taskId, todoListId) => {\r\n\r\n        return instance.delete(`/todo-lists/${todoListId}/tasks/${taskId}`)\r\n    }\r\n}","import {todoListAPI} from \"./api\";\r\nimport {ITask, ITodolist} from \"./types\";\r\nimport {Dispatch} from \"react\"\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport {AppState} from \"./redux-store\";\r\nconst SET_TO_DO_LISTS = \"SET_TO_DO_LISTS\"\r\nconst ADD_TO_DO_LIST = \"ADD_TO_DO_LIST\"\r\nconst DELETE_TO_DO_LIST = \"DELETE_TO_DO_LIST\"\r\nconst ADD_TASK = \"ADD_TASK\"\r\nconst SET_TO_DO_LIST_TASKS = \"SET_TO_DO_LIST_TASKS\"\r\nconst UPDATE_TASK = \"UPDATE_TASK\"\r\nconst DELETE_TASK = \"DELETE_TASK\"\r\ninterface IIinitialState {\r\n    todoLists:Array<ITodolist>\r\n    }\r\n\r\n\r\nlet initialState:IIinitialState = {\r\n    todoLists: [],\r\n}\r\nlet reducer = (state = initialState, action:AppReducerAtcionTypes):IIinitialState => {\r\n    switch (action.type) {\r\n\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state, todoLists: state.todoLists.map((item:ITodolist) => {\r\n\r\n                    if (item._id === action.todolistId) {\r\n                        return {\r\n                            ...item, tasks: item.tasks.filter(task => {\r\n                                return task._id !== action.taskId;\r\n                            })\r\n                        }\r\n                    } else return item\r\n                })\r\n\r\n            }\r\n\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state, todoLists: state.todoLists.map((item:ITodolist) => {\r\n                    if (item._id === action.todolistId) {\r\n                        return {\r\n                            ...item, tasks: item.tasks.map(task => {\r\n                                if (task._id === action.taskId) {\r\n                                    return action.task\r\n                                } else return task\r\n                            })\r\n                        }\r\n                    } else return item\r\n                })\r\n            }\r\n        case ADD_TASK:\r\n            return {\r\n                ...state, todoLists: state.todoLists.map((item:ITodolist) => {\r\n                    if (item._id === action.todolistId) {\r\n\r\n                        return {...item, tasks: [...item.tasks, action.newTask]}\r\n                    } else return item\r\n                })\r\n            }\r\n\r\n        case SET_TO_DO_LIST_TASKS:\r\n            return {\r\n                ...state, todoLists: state.todoLists.map((item:ITodolist) => {\r\n                    if (item._id === action.todolistId) {\r\n\r\n                        return {...item, tasks: action.tasks}\r\n                    } else return item\r\n                })\r\n            }\r\n\r\n        case  SET_TO_DO_LISTS:\r\n\r\n            return {\r\n                ...state, todoLists: action.todolists.map(item => {\r\n                    return {...item, tasks: []}\r\n                })\r\n            }\r\n\r\n        case ADD_TO_DO_LIST:\r\n            return {\r\n                ...state, todoLists: [...state.todoLists, action.todolist]\r\n            }\r\n\r\n        case DELETE_TO_DO_LIST:\r\n\r\n            return {\r\n                ...state, todoLists: state.todoLists.filter((item:ITodolist) => item._id !== action.todolistId)\r\n            }\r\n\r\n\r\n    }\r\n    return state\r\n}\r\n\r\nexport const setTodoListsTC = () => async (dispatch:Dispatch<AppActionTypes>) => {\r\n    let response = await todoListAPI.getTodoLists()\r\n    if (response) {\r\n        dispatch(setTodoListsAC(response.data))\r\n    }\r\n}\r\n\r\nexport const getTasksTC = (todolistId:string) => async (dispatch:ThunkDispatch<AppState,any,AppActionTypes>) => {\r\n    let response = await todoListAPI.getTasks(todolistId)\r\n    if (response) {\r\n        dispatch(setTodoListTasksAC(todolistId, response))\r\n    }\r\n}\r\nexport const updateTasksTC = (task:ITask, taskId:string, todoListId:string) => async (dispatch:Dispatch<AppActionTypes>) => {\r\n    let response = await todoListAPI.updateTask(task, taskId, todoListId)\r\n    if (response.data.resultCode === 0) {\r\n\r\n        dispatch(updateTaskAC(todoListId, taskId, response.data.item))\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (taskId:string, todoListId:string) => async (dispatch:Dispatch<AppActionTypes>) => {\r\n    let response = await todoListAPI.deleteTask(taskId, todoListId)\r\n    if (response.data.resultCode === 0) {\r\n\r\n        dispatch(deleteTaskAC(todoListId, taskId))\r\n    }\r\n}\r\n\r\nexport const addTodoListTC = (title:string) => async (dispatch:Dispatch<AppActionTypes>) => {\r\n    let response = await todoListAPI.addTodoList(title)\r\n    if (response) {\r\n        dispatch(addTodoListsAC(response.data.item))\r\n    }\r\n}\r\nexport const deleteTodoListTC = (todolistId:string) => async (dispatch:Dispatch<AppActionTypes>) => {\r\n    let response = await todoListAPI.deleteTodoList(todolistId)\r\n    if (response) {\r\n        dispatch(deleteTodoListAC(todolistId))\r\n    }\r\n}\r\nexport const addTaskTC = (taskTitle:string, todolistId:string) => async (dispatch:Dispatch<AppActionTypes>) => {\r\n    let response = await todoListAPI.addTask(taskTitle, todolistId)\r\n    if (response) {\r\n        dispatch(addTaskAC(todolistId, response.data.item))\r\n    }\r\n}\r\n\r\ninterface IDeleteTask {\r\n    type: typeof DELETE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\ninterface IUpdateTaskAC {\r\n    type: typeof UPDATE_TASK\r\n    todolistId: string\r\n    taskId: string\r\n    task: ITask\r\n}\r\n\r\ninterface ISetTodoListTasksAC {\r\n    type: typeof SET_TO_DO_LIST_TASKS\r\n    todolistId: string\r\n    tasks: Array<ITask>\r\n}\r\n\r\ninterface IAddTodoListsAC {\r\n    type: typeof ADD_TO_DO_LIST\r\n    todolist: ITodolist\r\n}\r\n\r\ninterface ISetTodoListsAC {\r\n    type: typeof SET_TO_DO_LISTS\r\n    todolists: Array<ITodolist>\r\n}\r\n\r\ninterface IDeleteTodoListAC {\r\n    type: typeof DELETE_TO_DO_LIST\r\n    todolistId: string\r\n}\r\n\r\ninterface IAddTaskAC {\r\n    type: typeof ADD_TASK\r\n    todolistId: string\r\n    newTask: ITask\r\n}\r\ntype AppReducerAtcionTypes=IDeleteTask|IUpdateTaskAC|ISetTodoListTasksAC|IAddTodoListsAC|ISetTodoListsAC|IDeleteTodoListAC|IAddTaskAC\r\nexport type AppActionTypes=AppReducerAtcionTypes\r\n\r\nexport const deleteTaskAC = (todolistId: string, taskId: string): IDeleteTask => ({\r\n    type: DELETE_TASK,\r\n    todolistId,\r\n    taskId\r\n})\r\nexport const updateTaskAC = (todolistId: string, taskId: string, task: ITask): IUpdateTaskAC => ({\r\n    type: UPDATE_TASK,\r\n    todolistId,\r\n    taskId,\r\n    task\r\n})\r\nexport const setTodoListTasksAC = (todolistId: string, tasks: Array<ITask>): ISetTodoListTasksAC => ({\r\n    type: SET_TO_DO_LIST_TASKS,\r\n    todolistId,\r\n    tasks\r\n})\r\n\r\n\r\nexport const addTodoListsAC = (todolist: ITodolist): IAddTodoListsAC => ({type: ADD_TO_DO_LIST, todolist})\r\nexport const setTodoListsAC = (todolists: Array<ITodolist>): ISetTodoListsAC => ({type: SET_TO_DO_LISTS, todolists})\r\nexport const deleteTodoListAC = (todolistId: string): IDeleteTodoListAC => ({type: DELETE_TO_DO_LIST, todolistId})\r\nexport const addTaskAC = (todolistId: string, newTask: ITask): IAddTaskAC => ({type: ADD_TASK, todolistId, newTask})\r\n\r\n\r\nexport default reducer\r\n\r\n","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport reducer, {AppActionTypes} from \"./appReducer\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n\r\n\r\nlet store = createStore(reducer, composeEnhancers(applyMiddleware(thunk as ThunkMiddleware<AppState,AppActionTypes>)))\r\nexport type AppState= ReturnType<typeof reducer>\r\n\r\n\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store.getState()","import React from 'react';\nimport './App.css';\n\nclass ItemInput extends React.Component {\n    state = {\n        inputValue: '',\n        inputErrorStyle: false\n    }\n    inputOnChange = (e) => {\n        this.setState({inputValue: e.target.value})\n        this.setState({inputErrorStyle: false})\n    }\n    addNewItem = (e) => {\n        if (this.state.inputValue === '') {\n            this.setState({inputErrorStyle: true})\n        } else {\n            this.props.addItem(this.state.inputValue,this.props.todoListId);\n            debugger\n            this.setState({inputValue: \"\"})\n            this.setState({inputErrorStyle: false})\n        }\n\n    }\n\n    render = () => {\n        return (<div className=\"todoList-newTaskForm\">\n                <input className={this.state.inputErrorStyle ? \"inputErrorStyle\" : \"\"} onChange={this.inputOnChange}\n                       value={this.state.inputValue} type=\"text\" placeholder={this.props.placeholder}/>\n                <button onClick={this.addNewItem}>Add</button>\n            </div>\n\n        );\n    }\n}\n\nexport default ItemInput;\n\n","import React from 'react';\nimport './App.css';\nimport ItemInput from \"./ItemInput\";\ninterface IProps {\n    deleteTodoList: (todolistId: string) => void\n    todoListId:string\n    placeholder:string\n    title:string\n    addTask: (taskTitle: string, todolistId: string) => void\n}\nclass TodoListHeader extends React.Component<IProps> {\n    render = () => {\n\n        return (\n            <div className=\"todoList-header\">\n                <div className=\"todoList-headerWrapper\">\n                <h3 className=\"todoList-header__title\">{this.props.title}</h3>\n                    <button className=\"todoList-header__delete-button\" onClick={()=>{this.props.deleteTodoList(this.props.todoListId)}}>X</button>\n                </div>\n                <ItemInput todoListId={this.props.todoListId} placeholder={this.props.placeholder} addItem={this.props.addTask} className=\"todoList-newTaskForm\"/>\n            </div>\n        );\n    }\n}\n\nexport default TodoListHeader;\n\n","import './App.css';\nimport * as React from \"react\";\ninterface IState {\n    editModeTask: boolean,\n    editModePriority:boolean,\n    newTaskName: string,\n    newPriority:string\n}\n// TodoListTask deleteTask={this.props.deleteTask}\n// updateTask={this.props.updateTask}\n// onChangeInputValue={this.props.onChangeInputValue}\n// taskId={item.id} task={item}\n// todoListId={this.props.todoListId}/>)\n\n\n\n\ninterface IProps {\n    deleteTask:(taskId:string, todoListId:string)=> void\n    updateTask:(task:any, taskId:string, todoListId:string)=> void\n    taskId:string\n    todoListId:string\n    task:any\n\n}\nclass TodoListTask extends React.Component<IProps,IState> {\n    state = {\n        editModeTask: false,\n        editModePriority:false,\n        newTaskName: \"\",\n        newPriority:\"\"\n    }\n    EditModeOn = () => {\n        this.setState({editModeTask: true})\n    }\n    EditModeTaskPriorityOn= () => {\n        this.setState({editModePriority: true})\n    }\n    newCheckedValue=(e:any)=>{\n        let newCheckedValue=e.currentTarget.checked\n        let status =(newCheckedValue===true)? 2 :0\n        this.props.updateTask({\n            ...this.props.task,\n            status: status\n        }, this.props.taskId, this.props.todoListId)\n    }\n\n\n    EditModeOff = (e:any) => {\n        if (!this.state.newTaskName) {\n            this.setState({editModeTask: false})\n        } else {\n            this.props.updateTask({\n                ...this.props.task,\n                title: this.state.newTaskName\n            }, this.props.taskId, this.props.todoListId)\n            this.setState({editModeTask: false, newTaskName: \"\"})\n        }\n    }\n\n    EditModeTaskPriorityOff = (e:any) => {\n        let newPriority=+this.state.newPriority\n        if (!this.state.newPriority) {\n            this.setState({editModePriority: false})\n        } else {\n            this.props.updateTask({\n                ...this.props.task,\n                priority: newPriority\n            }, this.props.taskId, this.props.todoListId)\n            this.setState({editModePriority: false, newPriority: \"\"})\n        }\n    }\n\n    setNewTaskName = (e:any) => {\n        this.setState({newTaskName: e.target.value})\n    }\n    setNewPriority = (e:any) => {\n        this.setState({newPriority: e.target.value})\n    }\n    render = () => {\n        return <div className={`todoList-task ${this.props.task.checked ? \"taskChecked\" : \"\"}`}>\n            <input onChange={(e) => {this.newCheckedValue(e)}} type=\"checkbox\" checked={(this.props.task.status === 2) ? true : false}/>\n            {!this.state.editModeTask &&\n            <span\n                onDoubleClick={this.EditModeOn}>{`${this.props.task.order} - ${this.props.task.title}` }</span>}\n            {this.state.editModeTask && <input placeholder=\"Enter new task title\" autoFocus={true} onBlur={this.EditModeOff} onChange={this.setNewTaskName}\n                                               value={this.state.newTaskName} type=\"text\"/>}\n            {!this.state.editModePriority &&\n            <span\n                onDoubleClick={this.EditModeTaskPriorityOn}>{`  task priority: ${this.props.task.priority}`}</span>}\n            {this.state.editModePriority && <input placeholder=\"Enter new priority value\" autoFocus={true} onBlur={this.EditModeTaskPriorityOff} onChange={this.setNewPriority}\n                                               value={this.state.newPriority} type=\"text\"/>}\n\n            <button onClick={() => {this.props.deleteTask(this.props.taskId,this.props.todoListId)\n            }}>X\n            </button>\n        </div>\n    }\n}\n\nexport default TodoListTask;\n\n","import React from 'react';\nimport './App.css';\nimport TodoListTask from \"./TodoListTask\";\nimport {ITask} from \"./types\";\ninterface IProps {\n    updateTask: (task: ITask, taskId: string, todoListId: string) => void\n    deleteTask: (taskId: string, todoListId: string) => void\n    todoListId:string\n    tasks:Array<ITask>\n}\n\n\n\nclass TodoListTasks extends React.Component<IProps> {\n    render = () => {\n        let {tasks = []} = this.props\n        let tasksElements = tasks.map((item:ITask) => <TodoListTask deleteTask={this.props.deleteTask}\n                                                            updateTask={this.props.updateTask}\n                                                            // onChangeInputValue={this.props.onChangeInputValue}\n                                                            taskId={item._id} task={item}\n                                                            todoListId={this.props.todoListId}/>)\n        return (\n            <div className=\"todoList-tasks\">\n                {tasksElements}\n            </div>\n\n        );\n    }\n}\n\nexport default TodoListTasks;\n\n","import React from 'react';\nimport './App.css';\n\ninterface IProps {\n    changeFilterValue:(newFilterValue:string)=>void\n    filterValue:string\n}\nclass TodoListFooter extends React.Component<IProps> {\n    state = {showMode: true}\n    changeShowMode = () => {\n        let newShowModeValue = !this.state.showMode\n        this.setState({showMode: newShowModeValue})\n    }\n    render = () => {\n        let classForAll = this.props.filterValue === \"ALL\" ? \"filter-active\" : \"\"\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\"\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\"\n\n        return (\n            <div className=\"todoList-footer\">\n                {this.state.showMode && <div>\n                    <button onClick={() => {\n                        this.props.changeFilterValue(\"ALL\")\n                    }} className={classForAll}>All\n                    </button>\n                    <button onClick={() => {\n                        this.props.changeFilterValue(\"Completed\")\n                    }} className={classForCompleted}>Completed\n                    </button>\n                    <button onClick={() => {\n                        this.props.changeFilterValue(\"Active\")\n                    }} className={classForActive}>Active\n                    </button>\n                </div>}\n                {this.state.showMode && <span onClick={this.changeShowMode}>Hide all</span>}\n                {!this.state.showMode && <span onClick={this.changeShowMode}>Show all</span>}\n\n            </div>\n        );\n    }\n}\n\nexport default TodoListFooter;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport TodoListHeader from \"./TodoListHeader\";\r\nimport TodoListTasks from \"./TodoListTasks\";\r\nimport TodoListFooter from \"./TodoListFooter\";\r\nimport {ITask, ITodolist} from \"./types\";\r\n// deleteTask={this.props.deleteTask}\r\n// deleteTodoList={this.props.deleteTodoList}\r\n// addTask={this.props.addTask}\r\n// getTasks={this.props.getTasks}\r\n// updateTask={this.props.updateTask}\r\n// tasks={item.tasks} title={item.title}\r\n// placeholder={\"Add new task\"}\r\n// todoListId={item.id}/>)\r\n\r\n\r\ninterface IProps {\r\n\r\n    deleteTodoList: (todolistId: string) => void\r\n    addTask: (taskTitle: string, todolistId: string) => void\r\n    getTasks: (todolistId: string) => void\r\n    updateTask: (task: ITask, taskId: string, todoListId: string) => void\r\n    deleteTask: (taskId: string, todoListId: string) => void\r\n    tasks: Array<ITask>\r\n    title: string\r\n    placeholder: string\r\n    todoListId: string\r\n\r\n}\r\n\r\nclass TodoList extends React.Component<IProps> {\r\n    componentDidMount() {\r\n        this.props.getTasks(this.props.todoListId)\r\n    }\r\n\r\n    state = {tasks: [], filterValue: \"ALL\"}\r\n    changeFilterValue = (newFilterValue: string) => {\r\n        this.setState({...this.state, filterValue: newFilterValue}\r\n        )\r\n    }\r\n\r\n    render = () => {\r\n        let filteredTasks = (this.state.filterValue === \"ALL\") ? this.props.tasks : (this.state.filterValue === \"Active\") ?\r\n            this.props.tasks.filter((item: ITask) => item.status !== 2) : this.state.filterValue === \"Completed\" ? this.props.tasks.filter((item: ITask) => item.status === 2) : []\r\n        return (\r\n            <div className=\"todoList\">\r\n                <TodoListHeader deleteTodoList={this.props.deleteTodoList} todoListId={this.props.todoListId}\r\n                                placeholder={this.props.placeholder} title={this.props.title}\r\n                                addTask={this.props.addTask}/>\r\n                <div className=\"todoList__wrapper\">\r\n                    <TodoListTasks deleteTask={this.props.deleteTask} updateTask={this.props.updateTask}\r\n                                   todoListId={this.props.todoListId}\r\n                                   tasks={filteredTasks}/>\r\n                    <TodoListFooter changeFilterValue={this.changeFilterValue} filterValue={this.state.filterValue}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport ItemInput from \"./ItemInput\";\nimport {connect} from \"react-redux\";\nimport {\n    addTaskTC,\n    addTodoListTC, AppActionTypes,\n    deleteTaskTC,\n    deleteTodoListTC,\n    getTasksTC,\n    setTodoListsTC,\n    updateTasksTC,\n} from \"./appReducer\";\nimport {AppState} from \"./redux-store\";\nimport {ITask, ITodolist} from \"./types\";\nimport { ThunkDispatch } from 'redux-thunk';\nimport TodoList from \"./TodoList\";\n\nclass App extends React.Component<IMapState&IMapDispatch> {\n    componentDidMount() {\n        this.props.setTodoLists()\n\n    }\n\n    render = () => {\n        let todoLists = this.props.todoLists.map((item:ITodolist) => <TodoList\n            deleteTask={this.props.deleteTask}\n            deleteTodoList={this.props.deleteTodoList}\n            addTask={this.props.addTask}\n            getTasks={this.props.getTasks}\n            updateTask={this.props.updateTask}\n            tasks={item.tasks} title={item.title}\n            placeholder={\"Add new task\"}\n            todoListId={item._id}/>)\n        return (\n            <div className=\"App\">\n                <ItemInput addItem={this.props.addTodoList} placeholder={\"New todolist name\"}/>\n                <div className=\"todoLists\">\n                    {todoLists}\n                </div>\n            </div>\n        );\n    }\n}\ninterface IMapState {\n    todoLists:Array<ITodolist>\n}\n\nlet mapStateToProps = (state:AppState):IMapState => {\n    return {\n        todoLists: state.todoLists\n    }\n}\ninterface IMapDispatch {\n    setTodoLists:()=>void\n    addTodoList:(title:string)=>void\n    deleteTodoList:(todolistId:string)=>void\n    addTask:(taskTitle:string,todolistId:string)=>void\n    getTasks: (todolistId:string) =>void\n    updateTask:(task:ITask, taskId:string, todoListId:string)=>void\n    deleteTask:(taskId:string, todoListId:string)=>void\n}\nlet mapDispatchToProps = (dispatch:ThunkDispatch<any,any,AppActionTypes>):IMapDispatch => {\n    return {\n        setTodoLists: () => {\n            dispatch(setTodoListsTC())\n        },\n        addTodoList: (title:string) => {\n            dispatch(addTodoListTC(title))\n        },\n        deleteTodoList: (todolistId:string) => {\n            dispatch(deleteTodoListTC(todolistId))\n        },\n        addTask: (taskTitle:string, todolistId:string) => {\n            dispatch(addTaskTC(taskTitle, todolistId))\n        },\n        getTasks: (todolistId:string) => {\n            dispatch(getTasksTC(todolistId))\n        },\n        updateTask: (task:ITask, taskId:string, todoListId:string) => {\n            dispatch(updateTasksTC(task, taskId, todoListId))\n        },\n        deleteTask: (taskId:string, todoListId:string) => {\n            dispatch(deleteTaskTC(taskId, todoListId))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux-store\";\nimport App from \"./App\";\n\n\nReactDOM.render(<Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}